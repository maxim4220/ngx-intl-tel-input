{"version":3,"file":"mask.directive.d.ts","sources":["mask.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ControlValueAccessor } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { IConfig } from './config';\nexport declare class MaskDirective implements ControlValueAccessor {\n    private document;\n    private _maskService;\n    private _maskValue;\n    private _inputValue;\n    private _position;\n    private _start;\n    private _end;\n    onChange: (_: any) => void;\n    onTouch: () => void;\n    constructor(document: any, _maskService: MaskService);\n    set maskExpression(value: string);\n    set specialCharacters(value: IConfig['specialCharacters']);\n    set patterns(value: IConfig['patterns']);\n    set prefix(value: IConfig['prefix']);\n    set sufix(value: IConfig['sufix']);\n    set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']);\n    set showMaskTyped(value: IConfig['showMaskTyped']);\n    set showTemplate(value: IConfig['showTemplate']);\n    set clearIfNotMatch(value: IConfig['clearIfNotMatch']);\n    onInput(e: KeyboardEvent): void;\n    onBlur(): void;\n    onFocus(e: MouseEvent | KeyboardEvent): void;\n    a(e: KeyboardEvent): void;\n    onPaste(): void;\n    /** It writes the value in the input */\n    writeValue(inputValue: string): Promise<void>;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    /** It disables the input element */\n    setDisabledState(isDisabled: boolean): void;\n    private _repeatPatternSymbols;\n}\n"]}